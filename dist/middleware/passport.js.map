{"version":3,"sources":["../../middleware/passport.js"],"names":["opts","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","config","jwtSecret","passport","use","Strategy","payload","done","User","findById","sub","then","user","Error","catch","err"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO;AACXC,kBAAgBC,wBAAWC,2BAAX,EADL;AAEXC,eAAaC,iBAAOC;AAFT,CAAb;;kBAKe;AAAA,SAAYC,SAASC,GAAT,CAAa,IAAIC,qBAAJ,CAAaT,IAAb,EAAmB,UAACU,OAAD,EAAUC,IAAV,EAAmB;AAC5EC,mBAAKC,QAAL,CAAcH,QAAQI,GAAtB,EACGC,IADH,CACQ,gBAAQ;AACZ,UAAIC,IAAJ,EAAU;AACR,eAAOL,KAAK,IAAL,EAAWK,IAAX,CAAP;AACD;;AAED,aAAOL,KAAK,IAAIM,KAAJ,CAAU,iBAAV,CAAL,EAAmC,IAAnC,CAAP;AACD,KAPH,EAQGC,KARH,CAQS;AAAA,aAAOP,KAAKQ,GAAL,EAAU,KAAV,CAAP;AAAA,KART;AASD,GAVuC,CAAb,CAAZ;AAAA,C","file":"passport.js","sourcesContent":["import { Strategy, ExtractJwt } from 'passport-jwt';\nimport User from '../models/user';\nimport config from '../config';\n\nconst opts = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: config.jwtSecret\n};\n\nexport default passport => passport.use(new Strategy(opts, (payload, done) => {\n  User.findById(payload.sub)\n    .then(user => {\n      if (user) {\n        return done(null, user);\n      }\n\n      return done(new Error(\"User not found.\"), null);\n    })\n    .catch(err => done(err, false))\n}));\n"]}