{"version":3,"sources":["../../middleware/passport.js"],"names":["opts","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","config","jwtSecret","passport","use","Strategy","payload","done","type","console","log","Error","Model","userType","User","Company","findById","sub","then","user","catch","err"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,OAAO;AACXC,kBAAgBC,wBAAWC,2BAAX,EADL;AAEXC,eAAaC,iBAAOC;AAFT,CAAb;;kBAKe;AAAA,SAAYC,SAASC,GAAT,CAAa,IAAIC,qBAAJ,CAAaT,IAAb,EAAmB,UAACU,OAAD,EAAUC,IAAV,EAAmB;AAC5E,QAAGD,QAAQE,IAAR,KAAiB,MAApB,EAA2B;AACzBC,cAAQC,GAAR,CAAYJ,OAAZ;AACA,aAAOC,KAAK,IAAII,KAAJ,CAAU,eAAV,CAAL,EAAiC,IAAjC,CAAP;AACD;;AAED,QAAIC,QAAQ,IAAZ;;AAEA,YAAON,QAAQO,QAAf;AACE,WAAK,MAAL;AACED,gBAASE,cAAT;AACA;AACF,WAAK,SAAL;AACEF,gBAAQG,iBAAR;AACA;AACF;AACAN,gBAAQC,GAAR,CAAY,gBAAZ;AACA,eAAOH,KAAK,IAAII,KAAJ,CAAU,iBAAV,CAAL,EAAmC,IAAnC,CAAP;AATF;;AAYAC,UAAMI,QAAN,CAAeV,QAAQW,GAAvB,EACGC,IADH,CACQ,gBAAQ;AACZ,UAAIC,IAAJ,EAAU;AACRA,aAAKX,IAAL,GAAYF,QAAQO,QAApB;AACA,eAAON,KAAK,IAAL,EAAWY,IAAX,CAAP;AACD;;AAED,aAAOZ,KAAK,IAAII,KAAJ,CAAU,iBAAV,CAAL,EAAmC,IAAnC,CAAP;AACD,KARH,EASGS,KATH,CASS;AAAA,aAAOb,KAAKc,GAAL,EAAU,KAAV,CAAP;AAAA,KATT;AAUD,GA9BuC,CAAb,CAAZ;AAAA,C","file":"passport.js","sourcesContent":["import { Strategy, ExtractJwt } from 'passport-jwt';\nimport User from '../models/user';\nimport Company from '../models/company';\nimport config from '../config';\n\nconst opts = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: config.jwtSecret\n};\n\nexport default passport => passport.use(new Strategy(opts, (payload, done) => {\n  if(payload.type !== \"auth\"){\n    console.log(payload)\n    return done(new Error(\"Invalid token\"), null);\n  }\n\n  let Model = null;\n\n  switch(payload.userType){\n    case 'user': \n      Model =  User;\n      break;\n    case 'company':\n      Model = Company;\n      break;\n    default: \n    console.log(\"user not found\");\n    return done(new Error(\"User not found.\"), null);\n  }\n\n  Model.findById(payload.sub)\n    .then(user => {\n      if (user) {\n        user.type = payload.userType\n        return done(null, user);\n      }\n\n      return done(new Error(\"User not found.\"), null);\n    })\n    .catch(err => done(err, false))\n}));"]}