{"version":3,"sources":["../../api/logout.js"],"names":["logoutApi","create","res","body","headers","refreshToken","jwt","verify","config","jwtSecret","err","decoded","type","Model","userType","UserModel","CompanyModel","findById","sub","then","user","refreshTokens","filter","e","authTokens","save","json","status","message","catch","devMessage","error","succsess","toString"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,wCAAS;AACnBC,UADmB,wBACQC,GADR,EACa;AAAA,YAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,YAAhBC,OAAgB,QAAhBA,OAAgB;;AAChC,YAAMC,eAAeF,KAAKE,YAAL,IAAqB,EAA1C;AACAC,+BAAIC,MAAJ,CAAWF,YAAX,EAAyBG,iBAAOC,SAAhC,EAA2C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzD,gBAAG,CAACD,GAAD,IAAQC,QAAQC,IAAR,IAAgB,SAA3B,EAAqC;;AAEjC,oBAAIC,QAAQ,IAAZ;;AAEA,wBAAOF,QAAQG,QAAf;AACI,yBAAK,MAAL;AACED,gCAASE,cAAT;AACA;AACF,yBAAK,SAAL;AACEF,gCAAQG,iBAAR;AACA;AANN;;AASAH,sBAAMI,QAAN,CAAeN,QAAQO,GAAvB,EAA4BC,IAA5B,CAAiC,gBAAQ;AACrC,wBAAIC,IAAJ,EAAU;AACNA,6BAAKC,aAAL,GAAqBD,KAAKC,aAAL,CAAmBC,MAAnB,CAA0B;AAAA,mCAAKC,MAAMlB,YAAX;AAAA,yBAA1B,CAArB;;AAEA,4BAAID,WAAWA,QAAQ,eAAR,CAAf,EAAwC;AACpCgB,iCAAKI,UAAL,GAAkBJ,KAAKI,UAAL,CAAgBF,MAAhB,CAAuB;AAAA,uCAAKC,MAAMnB,QAAQ,eAAR,CAAX;AAAA,6BAAvB,CAAlB;AACH;AACDgB,6BAAKK,IAAL,GACCN,IADD,CAEIjB,IAAIwB,IAAJ,CAAS;AACTC,oCAAQ,CADC;AAETC,qCAAS;AAFA,yBAAT,CAFJ,EAMCC,KAND,CAMO;AAAA,mCAAS3B,IAAIwB,IAAJ,CAAS;AACrBC,wCAAQ,CAAC,CADY;AAErBC,yCAAS,iBAFY;AAGrBE,4CAAYC,MAAMH;AAHG,6BAAT,CAAT;AAAA,yBANP;AAWH;AACJ,iBAnBD,EAmBGC,KAnBH,CAmBU,UAACE,KAAD,EAAW;AACjB7B,wBAAIwB,IAAJ,CAAS;AACLC,gCAAQ,CAAC,CADJ;AAELC,iCAAS,EAFJ;AAGLE,oCAAYC;AAHP,qBAAT;AAKH,iBAzBD;AA0BH,aAvCD,MAuCO;AACH7B,oBAAIyB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACjBM,8BAAU,KADO;AAEjBJ,6BAASlB,IAAIuB,QAAJ;AAFQ,iBAArB;AAIH;AACJ,SA9CD;AA+CH;AAlDsB,CAAT,CAAlB;;kBAqDejC,S","file":"logout.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport jwt from 'jsonwebtoken';\nimport UserModel from '../models/user';\nimport CompanyModel from '../models/company';\nimport config from '../config';\n\nconst logoutApi = resource({\n        create ({ body, headers }, res) {\n        const refreshToken = body.refreshToken || \"\";\n        jwt.verify(refreshToken, config.jwtSecret, (err, decoded) => {\n            if(!err && decoded.type == \"refresh\"){\n\n                let Model = null;\n\n                switch(decoded.userType){\n                    case 'user': \n                      Model =  UserModel;\n                      break;\n                    case 'company':\n                      Model = CompanyModel;\n                      break;\n                }\n\n                Model.findById(decoded.sub).then(user => {\n                    if (user) {\n                        user.refreshTokens = user.refreshTokens.filter(e => e !== refreshToken);\n\n                        if( headers && headers['authorization']){\n                            user.authTokens = user.authTokens.filter(e => e !== headers['authorization']);\n                        }\n                        user.save()\n                        .then(\n                            res.json({\n                            status: 0,\n                            message: 'Logout successful',\n                        }))\n                        .catch(error => res.json({\n                            status: -1,\n                            message: 'Logout failture',\n                            devMessage: error.message\n                        }))\n                    }\n                }).catch( (error) => {\n                    res.json({\n                        status: -1,\n                        message: \"\",\n                        devMessage: error,\n                    });\n                })\n            } else {\n                res.status(400).json({\n                    succsess: false,\n                    message: err.toString(),\n                })\n            }\n        })\n    }\n});\n\nexport default logoutApi;"]}