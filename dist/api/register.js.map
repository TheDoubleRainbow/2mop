{"version":3,"sources":["../../api/register.js"],"names":["userApi","create","res","body","console","log","CompanyModel","schema","user","type","UserModel","json","status","message","devMessage","end","authToken","jwt","sign","sub","_id","userType","config","jwtSecret","expiresIn","authTokenExpiresIn","refreshToken","refreshTokenExpiresIn","auth_tokens","push","refresh_tokens","save","then","data","catch","error","code"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,UAAU,wCAAS;AACxBC,OADwB,wBACPC,GADO,EACF;AAAA,MAAbC,IAAa,QAAbA,IAAa;;AACrB;AACAC,UAAQC,GAAR,CAAYC,kBAAaC,MAAzB;AACA,MAAIC,OAAO,IAAX;;AAEA,UAAOL,KAAKM,IAAZ;AACC,QAAK,MAAL;AACCD,WAAO,IAAIE,cAAJ,CAAcP,IAAd,CAAP;AACA;AACD,QAAK,SAAL;AACCK,WAAO,IAAIF,iBAAJ,CAAiBH,IAAjB,CAAP;AACA;AACD;AACCD,QAAIS,IAAJ,CAAS;AACRC,aAAQ,CAAC,CADD;AAERC,cAAS,EAFD;AAGRC,iBAAY;AAHJ,KAAT;AAKAZ,QAAIa,GAAJ;AAbF;AAeA,MAAIC,YAAY,YAAYC,uBAAIC,IAAJ,CAAS,EAAEC,KAAKX,KAAKY,GAAZ,EAAiBX,MAAM,MAAvB,EAA+BY,UAAUlB,KAAKM,IAA9C,EAAT,EAA+Da,iBAAOC,SAAtE,EAAiF;AAC7GC,cAAWF,iBAAOG;AAD2F,GAAjF,CAA5B;;AAIA,MAAIC,eAAeT,uBAAIC,IAAJ,CAAS,EAAEC,KAAKX,KAAKY,GAAZ,EAAiBX,MAAM,SAAvB,EAAkCY,UAAUlB,KAAKM,IAAjD,EAAT,EAAkEa,iBAAOC,SAAzE,EAAoF;AACvGC,cAAWF,iBAAOK;AADqF,GAApF,CAAnB;;AAIAnB,OAAKoB,WAAL,CAAiBC,IAAjB,CAAsBb,SAAtB;AACAR,OAAKsB,cAAL,CAAoBD,IAApB,CAAyBH,YAAzB;;AAEAlB,OAAKuB,IAAL,GACEC,IADF,CACQ,YAAM;AACZ9B,OAAIS,IAAJ,CAAS;AACRC,YAAQ,CADA;AAERC,aAAS,0BAFD;AAGRoB,UAAM;AACLjB,yBADK;AAELQ,gBAAWF,iBAAOG,kBAFb;AAGLC;AAHK;AAHE,IAAT;AASA,GAXF,EAYEQ,KAZF,CAYQ,iBAAS;AACf,OAAIrB,UAAU,uBAAd;AACA,OAAGsB,MAAMC,IAAN,IAAc,KAAjB,EAAwBvB,UAAU,gCAAV;AACxBX,OAAIS,IAAJ,CAAS;AACRC,YAAQuB,MAAMC,IAAN,IAAc,CAAC,CADf;AAERvB,oBAFQ;AAGR;AACAC,gBAAYqB,MAAMtB;AAJV,IAAT;AAMA,GArBF;AAsBA;AAtDuB,CAAT,CAAhB;;kBAyDeb,O","file":"register.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport resMessage from '../lib/res-message';\nimport UserModel from '../models/user';\nimport CompanyModel from '../models/company';\nimport jwt from 'jsonwebtoken';\nimport config from '../config';\n\n// const addFullNameToBody = body => merge({\n// \tname: {\n// \t\tfull: `${get('name.first', body)} ${get('name.last', body)}`\n// \t},\n// }, body);\n\nconst userApi = resource({\n\tcreate({ body }, res) {\n\t\t//let user = new UserModel(addFullNameToBody(body));\n\t\tconsole.log(CompanyModel.schema);\n\t\tlet user = null;\n\n\t\tswitch(body.type){\n\t\t\tcase 'user': \n\t\t\t\tuser = new UserModel(body);\n\t\t\t\tbreak;\n\t\t\tcase 'company':\n\t\t\t\tuser = new CompanyModel(body);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: -1,\n\t\t\t\t\tmessage: \"\",\n\t\t\t\t\tdevMessage: \"Invalid or missing type\"\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t}\n\t\tvar authToken = \"bearer \" + jwt.sign({ sub: user._id, type: 'auth', userType: body.type }, config.jwtSecret, {\n\t\texpiresIn: config.authTokenExpiresIn\n\t\t});\n\n\t\tvar refreshToken = jwt.sign({ sub: user._id, type: 'refresh', userType: body.type }, config.jwtSecret, {\n\t\texpiresIn: config.refreshTokenExpiresIn\n\t\t});\n\n\t\tuser.auth_tokens.push(authToken);\n\t\tuser.refresh_tokens.push(refreshToken);\n\n\t\tuser.save()\n\t\t\t.then( () => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 0,\n\t\t\t\t\tmessage: 'Registration successfull',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\texpiresIn: config.authTokenExpiresIn,\n\t\t\t\t\t\trefreshToken\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlet message = \"Registration failture\";\n\t\t\t\tif(error.code == 11000) message = \"User with such email is exists\";\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: error.code || -1,\n\t\t\t\t\tmessage,\n\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\tdevMessage: error.message,\n\t\t\t\t})\n\t\t\t})\n\t},\n});\n\nexport default userApi;\n"]}