{"version":3,"sources":["../../api/register.js"],"names":["userApi","create","res","body","console","log","CompanyModel","schema","user","userData","type","UserModel","name","email","password","json","status","message","devMessage","end","authToken","jwt","sign","sub","_id","userType","config","jwtSecret","expiresIn","authTokenExpiresIn","refreshToken","refreshTokenExpiresIn","authTokens","push","refreshTokens","save","then","data","uId","catch","error","code"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,UAAU,wCAAS;AACxBC,OADwB,wBACPC,GADO,EACF;AAAA,MAAbC,IAAa,QAAbA,IAAa;;AACrB;AACAC,UAAQC,GAAR,CAAYC,kBAAaC,MAAzB;AACA,MAAIC,OAAO,IAAX;;AAEA,MAAMC,WAAWN,KAAKM,QAAtB;;AAEA,UAAON,KAAKO,IAAZ;AACC,QAAK,MAAL;AACCF,WAAO,IAAIG,cAAJ,CAAc,EAACC,MAAMH,SAASG,IAAhB,EAAsBC,OAAOJ,SAASI,KAAtC,EAA6CC,UAAUL,SAASK,QAAhE,EAAd,CAAP;AACA;AACD,QAAK,SAAL;AACCN,WAAO,IAAIF,iBAAJ,CAAiB,EAACM,MAAMH,SAASG,IAAhB,EAAsBC,OAAOJ,SAASI,KAAtC,EAA6CC,UAAUL,SAASK,QAAhE,EAAjB,CAAP;AACA;AACD;AACCZ,QAAIa,IAAJ,CAAS;AACRC,aAAQ,CADA;AAERC,cAAS,EAFD;AAGRC,iBAAY;AAHJ,KAAT;AAKAhB,QAAIiB,GAAJ;AAbF;AAeA,MAAIC,YAAY,YAAYC,uBAAIC,IAAJ,CAAS,EAAEC,KAAKf,KAAKgB,GAAZ,EAAiBd,MAAM,MAAvB,EAA+Be,UAAUtB,KAAKO,IAA9C,EAAT,EAA+DgB,iBAAOC,SAAtE,EAAiF;AAC7GC,cAAWF,iBAAOG;AAD2F,GAAjF,CAA5B;;AAIA,MAAIC,eAAeT,uBAAIC,IAAJ,CAAS,EAAEC,KAAKf,KAAKgB,GAAZ,EAAiBd,MAAM,SAAvB,EAAkCe,UAAUtB,KAAKO,IAAjD,EAAT,EAAkEgB,iBAAOC,SAAzE,EAAoF;AACvGC,cAAWF,iBAAOK;AADqF,GAApF,CAAnB;;AAIAvB,OAAKwB,UAAL,CAAgBC,IAAhB,CAAqBb,SAArB;AACAZ,OAAK0B,aAAL,CAAmBD,IAAnB,CAAwBH,YAAxB;;AAEAtB,OAAK2B,IAAL,GACEC,IADF,CACQ,YAAM;AACZlC,OAAIa,IAAJ,CAAS;AACRC,YAAQ,CADA;AAERC,aAAS,0BAFD;AAGRoB,UAAM;AACLZ,eAAUtB,KAAKO,IADV;AAEL4B,UAAK9B,KAAKgB,GAFL;AAGLJ,yBAHK;AAILQ,gBAAWF,iBAAOG,kBAJb;AAKLC;AALK;AAHE,IAAT;AAWA,GAbF,EAcES,KAdF,CAcQ,iBAAS;AACf,OAAItB,UAAU,uBAAd;AACA,OAAGuB,MAAMC,IAAN,IAAc,KAAjB,EAAwB;AACvBxB,cAAU,gCAAV;AACAf,QAAIa,IAAJ,CAAS;AACRC,aAAQ,CADA;AAERC,qBAFQ;AAGR;AACAC,iBAAYsB;AAJJ,KAAT;AAMA,IARD,MAQO;AACNtC,QAAIa,IAAJ,CAAS;AACRC,aAAQwB,MAAMC,IAAN,IAAc,CAAC,CADf;AAERxB,qBAFQ;AAGR;AACAC,iBAAYsB;AAJJ,KAAT;AAMA;AACD,GAhCF;AAiCA;AAnEuB,CAAT,CAAhB;;kBAsEexC,O","file":"register.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport UserModel from '../models/user';\nimport CompanyModel from '../models/company';\nimport jwt from 'jsonwebtoken';\nimport config from '../config';\n\n// const addFullNameToBody = body => merge({\n// \tname: {\n// \t\tfull: `${get('name.first', body)} ${get('name.last', body)}`\n// \t},\n// }, body);\n\nconst userApi = resource({\n\tcreate({ body }, res) {\n\t\t//let user = new UserModel(addFullNameToBody(body));\n\t\tconsole.log(CompanyModel.schema);\n\t\tlet user = null;\n\n\t\tconst userData = body.userData;\n\n\t\tswitch(body.type){\n\t\t\tcase 'user': \n\t\t\t\tuser = new UserModel({name: userData.name, email: userData.email, password: userData.password});\n\t\t\t\tbreak;\n\t\t\tcase 'company':\n\t\t\t\tuser = new CompanyModel({name: userData.name, email: userData.email, password: userData.password});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tmessage: \"\",\n\t\t\t\t\tdevMessage: \"Invalid or missing type\"\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t}\n\t\tvar authToken = \"bearer \" + jwt.sign({ sub: user._id, type: 'auth', userType: body.type }, config.jwtSecret, {\n\t\texpiresIn: config.authTokenExpiresIn\n\t\t});\n\n\t\tvar refreshToken = jwt.sign({ sub: user._id, type: 'refresh', userType: body.type }, config.jwtSecret, {\n\t\texpiresIn: config.refreshTokenExpiresIn\n\t\t});\n\n\t\tuser.authTokens.push(authToken);\n\t\tuser.refreshTokens.push(refreshToken);\n\n\t\tuser.save()\n\t\t\t.then( () => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 0,\n\t\t\t\t\tmessage: 'Registration successfull',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tuserType: body.type,\n\t\t\t\t\t\tuId: user._id,\n\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\texpiresIn: config.authTokenExpiresIn,\n\t\t\t\t\t\trefreshToken\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlet message = \"Registration failture\";\n\t\t\t\tif(error.code == 11000) {\n\t\t\t\t\tmessage = \"User with such email is exists\";\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tstatus: 2,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\t\tdevMessage: error,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tstatus: error.code || -1,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\t\tdevMessage: error,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t},\n});\n\nexport default userApi;\n"]}