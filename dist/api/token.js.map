{"version":3,"sources":["../../api/token.js"],"names":["tokenApi","create","res","body","headers","refreshToken","jwt","verify","String","config","jwtSecret","err","decoded","type","Model","userType","UserModel","CompanyModel","findById","sub","select","authTokens","refreshTokens","then","user","console","log","includes","json","status","message","devMessage","filter","e","auth_tokens","authToken","sign","_id","expiresIn","authTokenExpiresIn","refreshTokenExpiresIn","push","refreshTokensPA","accessTokensPA","forEach","element","index","Promise","resolve","reject","accessTokens","all","result","splice","item","save","data","catch","error"],"mappings":"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","file":"token.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport jwt from 'jsonwebtoken';\nimport UserModel from '../models/user';\nimport CompanyModel from '../models/company';\nimport config from '../config';\n\nconst tokenApi = resource({\n    create({ body, headers }, res) {\n        const refreshToken = body.refreshToken || \"\";\n        jwt.verify(String(refreshToken), config.jwtSecret, (err, decoded) => {\n            if(!err && decoded.type == \"refresh\"){\n                \n                let Model = null;\n\n                switch(decoded.userType){\n                    case 'user': \n                      Model =  UserModel;\n                      break;\n                    case 'company':\n                      Model = CompanyModel;\n                      break;\n                }\n\n                Model.findById(decoded.sub).select({authTokens: 1, refreshTokens: 1}).then(user => {\n                    if (user) {\n                        let refreshToken = body.refreshToken || \"\";\n                        console.log(refreshToken);\n                        //console.log(user.refreshTokens);\n                        if(!user.refreshTokens.includes(refreshToken)){\n                            res.json({\n                                status: -1,\n                                message: \"\",\n                                devMessage: \"Invalid refresh token\",\n                            })\n                            return;\n                        }\n\n                        user.refreshTokens = user.refreshTokens.filter(e => e != refreshToken);\n\n                        if( headers && headers['authorization']){\n                            user.auth_tokens = user.authTokens.filter(e => e != headers['authorization']);\n                        }\n\n                        var authToken = \"bearer \" + jwt.sign({ sub: user._id, type: 'auth', userType: decoded.userType }, config.jwtSecret, {\n                        expiresIn: config.authTokenExpiresIn\n                        });\n                \n                        refreshToken = jwt.sign({ sub: user._id, type: 'refresh', userType: decoded.userType }, config.jwtSecret, {\n                        expiresIn: config.refreshTokenExpiresIn\n                        });\n                \n                        user.authTokens.push(authToken);\n                        user.refreshTokens.push(refreshToken);\n                        let refreshTokensPA = [];\n                        let accessTokensPA = [];\n                        user.refreshTokens.forEach((element, index) => {\n                            refreshTokensPA.push(new Promise((resolve, reject) => {\n                                jwt.verify(element, config.jwtSecret, (err, decoded) => {\n                                    if(decoded){\n                                        resolve(index);\n                                    }\n                                });\n                            }))\n                        });\n                        user.accessTokens.forEach((element, index) => {\n                            accessTokensPA.push(new Promise((resolve, reject) => {\n                                jwt.verify(element, config.jwtSecret, (err, decoded) => {\n                                    if(err){\n                                        resolve(index);\n                                    }\n                                });\n                            }))\n                        });\n                        Promise.all([Promise.all(refreshTokensPA), Promise.all(accessTokensPA)]).then(result => {\n                            result[0].forEach(item=>{\n                                user.refreshTokens.splice(item, 1);\n                            })\n                            result[1].forEach(item=>{\n                                user.accessTokens.splice(item, 1);\n                            })\n                            user.save()\n                            .then(\n                                res.json({\n                                status: 0,\n                                message: \"\",\n                                devMessage: 'Token refreshed successful',\n                                data: {\n                                    authToken,\n                                    expiresIn: config.authTokenExpiresIn,\n                                    refreshToken\n                                }\n                            }))\n                            .catch(error => res.json({\n                                status: -1,\n                                message: \"\",\n                                devMessage: error\n                            }))\n                        })\n                    } else {\n                        res.json({\n                            status: -1,\n                            message: \"\",\n                            devMessage: \"User fetch error\",\n                        })\n                    }\n                })\n            } else {\n                res.json({\n                    status: 1,\n                    message: \"\",\n                    devMessage: \"Invalid refresh token\",\n                })\n            }\n        });\n    },\n});\n\nexport default tokenApi;"]}