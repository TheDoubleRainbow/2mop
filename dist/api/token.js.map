{"version":3,"sources":["../../api/token.js"],"names":["tokenApi","create","res","body","headers","refreshToken","jwt","verify","config","jwtSecret","err","decoded","type","UserModel","findById","sub","then","user","refresh_tokens","filter","e","auth_tokens","authToken","sign","_id","expiresIn","authTokenExpiresIn","refreshTokenExpiresIn","push","save","json","status","message","devMessage","data","catch","resMessage","error","toString"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,wCAAS;AACtBC,UADsB,wBACIC,GADJ,EACS;AAAA,YAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,YAAhBC,OAAgB,QAAhBA,OAAgB;;AAC3B,YAAMC,eAAeF,KAAKE,YAAL,IAAqB,EAA1C;AACAC,+BAAIC,MAAJ,CAAWF,YAAX,EAAyBG,iBAAOC,SAAhC,EAA2C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzD,gBAAG,CAACD,GAAD,IAAQC,QAAQC,IAAR,IAAgB,SAA3B,EAAqC;AACjCC,+BAAUC,QAAV,CAAmBH,QAAQI,GAA3B,EAAgCC,IAAhC,CAAqC,gBAAQ;AACzC,wBAAIC,IAAJ,EAAU;;AAENA,6BAAKC,cAAL,GAAsBD,KAAKC,cAAL,CAAoBC,MAApB,CAA2B;AAAA,mCAAKC,MAAMf,YAAX;AAAA,yBAA3B,CAAtB;;AAEA,4BAAID,WAAWA,QAAQ,eAAR,CAAf,EAAwC;AACpCa,iCAAKI,WAAL,GAAmBJ,KAAKI,WAAL,CAAiBF,MAAjB,CAAwB;AAAA,uCAAKC,MAAMhB,QAAQ,eAAR,CAAX;AAAA,6BAAxB,CAAnB;AACH;;AAED,4BAAIkB,YAAY,YAAYhB,uBAAIiB,IAAJ,CAAS,EAAER,KAAKE,KAAKO,GAAZ,EAAiBZ,MAAM,MAAvB,EAAT,EAA0CJ,iBAAOC,SAAjD,EAA4D;AACxFgB,uCAAWjB,iBAAOkB;AADsE,yBAA5D,CAA5B;;AAIA,4BAAIrB,eAAeC,uBAAIiB,IAAJ,CAAS,EAAER,KAAKE,KAAKO,GAAZ,EAAiBZ,MAAM,SAAvB,EAAT,EAA6CJ,iBAAOC,SAApD,EAA+D;AAClFgB,uCAAWjB,iBAAOmB;AADgE,yBAA/D,CAAnB;;AAIAV,6BAAKI,WAAL,CAAiBO,IAAjB,CAAsBN,SAAtB;AACAL,6BAAKC,cAAL,CAAoBU,IAApB,CAAyBvB,YAAzB;AACAY,6BAAKY,IAAL,GACCb,IADD,CAEId,IAAI4B,IAAJ,CAAS;AACTC,oCAAQ,CADC;AAETC,qCAAS,EAFA;AAGTC,wCAAY,4BAHH;AAITC,kCAAM;AACFZ,oDADE;AAEFG,2CAAWjB,iBAAOkB,kBAFhB;AAGFrB;AAHE;AAJG,yBAAT,CAFJ,EAYC8B,KAZD,CAYO;AAAA,mCAASjC,IAAI4B,IAAJ,CAAS;AACrBC,wCAAQ,CAAC,CADY;AAErBC,yCAAS,EAFY;AAGrBC,4CAAYG,WAAWC,MAAML,OAAjB;AAHS,6BAAT,CAAT;AAAA,yBAZP;AAiBH,qBAnCD,MAmCO;AACH9B,4BAAI4B,IAAJ,CAAS;AACLC,oCAAQ,CAAC,CADJ;AAELC,qCAAS,EAFJ;AAGLC,wCAAY;AAHP,yBAAT;AAKH;AACJ,iBA3CD;AA4CH,aA7CD,MA6CO;AACH/B,oBAAI4B,IAAJ,CAAS;AACLC,4BAAQ,CADH;AAELC,6BAAS,EAFJ;AAGLC,gCAAYvB,IAAI4B,QAAJ;AAHP,iBAAT;AAKH;AACJ,SArDD;AAsDH;AAzDqB,CAAT,CAAjB;;kBA4DetC,Q","file":"token.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport jwt from 'jsonwebtoken';\nimport UserModel from '../models/user';\nimport config from '../config';\n\nconst tokenApi = resource({\n    create({ body, headers }, res) {\n        const refreshToken = body.refreshToken || \"\";\n        jwt.verify(refreshToken, config.jwtSecret, (err, decoded) => {\n            if(!err && decoded.type == \"refresh\"){\n                UserModel.findById(decoded.sub).then(user => {\n                    if (user) {\n\n                        user.refresh_tokens = user.refresh_tokens.filter(e => e !== refreshToken);\n\n                        if( headers && headers['authorization']){\n                            user.auth_tokens = user.auth_tokens.filter(e => e !== headers['authorization']);\n                        }\n\n                        var authToken = \"bearer \" + jwt.sign({ sub: user._id, type: 'auth' }, config.jwtSecret, {\n                        expiresIn: config.authTokenExpiresIn\n                        });\n                \n                        var refreshToken = jwt.sign({ sub: user._id, type: 'refresh' }, config.jwtSecret, {\n                        expiresIn: config.refreshTokenExpiresIn\n                        });\n                \n                        user.auth_tokens.push(authToken);\n                        user.refresh_tokens.push(refreshToken);\n                        user.save()\n                        .then(\n                            res.json({\n                            status: 0,\n                            message: \"\",\n                            devMessage: 'Token refreshed successful',\n                            data: {\n                                authToken,\n                                expiresIn: config.authTokenExpiresIn,\n                                refreshToken\n                            }\n                        }))\n                        .catch(error => res.json({\n                            status: -1,\n                            message: \"\",\n                            devMessage: resMessage(error.message)\n                        }))\n                    } else {\n                        res.json({\n                            status: -1,\n                            message: \"\",\n                            devMessage: \"User fetch error\",\n                        })\n                    }\n                })\n            } else {\n                res.json({\n                    status: 1,\n                    message: \"\",\n                    devMessage: err.toString(),\n                })\n            }\n        });\n    },\n});\n\nexport default tokenApi;"]}