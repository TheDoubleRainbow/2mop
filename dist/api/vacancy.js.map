{"version":3,"sources":["../../api/vacancy.js"],"names":["router","express","Router","get","res","query","page","parseInt","perPage","employer","VacancyModel","paginate","offset","limit","then","send","status","message","devMessage","data","result","docs","metaData","totalPages","total","currentPage","catch","json","error","toString","req","vacancyId","params","findById","post","requireAuth","body","user","type","vacancy","vacancyModel","name","avatar","description","employerId","_id","requiredSkills","save","code","put","updates","birthDate","skills","phoneNumper","update","err","delete","company","findByIdAndRemove"],"mappings":"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","file":"vacancy.js","sourcesContent":["import VacancyModel from '../models/vacancy';\nimport requireAuth from '../middleware/require-auth';\nimport express from 'express';\nimport vacancyModel from '../models/vacancy';\nconst router = express.Router();\n\nrouter.get('/', ({query}, res) => {\n\t//VacancyModel.find({}, {auth_tokens: 0, refresh_tokens: 0}).\n\tconst page = parseInt(query.page || 0);\n    const perPage = parseInt(query.perPage || 20);\n    const employer = query.employer; \n\tVacancyModel.paginate(employer ? {employer} : {}, {offset: page * perPage , limit: perPage})\n\t\t.then(result => res.send({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result.docs,\n\t\t\tmetaData: {\n\t\t\t\ttotalPages: result.total % perPage == 0 ? result.total / perPage : parseInt(result.total / perPage) + 1,\n\t\t\t\tperPage: perPage,\n\t\t\t\tcurrentPage: page\t\t\n\t\t\t}\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: error.toString(),\n\t\t}))\n});\n\nrouter.get('/:vacancyId', ({ params: { vacancyId } }, req) => {\n\tVacancyModel.findById(vacancyId)\n\t\t.then(result => res.send({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result,\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"Vacancy not found\",\n\t\t}))\n});\n\nrouter.post('/', requireAuth, ({body, user}, res) => {\n\tif(user.type == \"company\"){\n\t\tconst vacancy = new vacancyModel({name: body.name, avatar: body.avatar, description: body.description, employerId: user._id, requiredSkills: body.requiredSkills});\n\t\tvacancy.save()\t\t\t\n\t\t\t.then( () => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 0,\n\t\t\t\t\tmessage: 'Vacancy successfull created',\n\t\t\t\t\tdata: vacancy,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: error.code || -1,\n\t\t\t\t\tmessage: \"\",\n\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\tdevMessage: error.message,\n\t\t\t\t})\n\t\t\t})\n\t} else {\n\t\tres.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"You don't have permissions to do it\",\n\t\t})\n\t}\n});\n\nrouter.put('/:vacancyId', requireAuth, ({ params: { vacancyId }, body, user }, res) => {\n\tlet updates = {name: body.name, avatar: body.avatar, birthDate: body.birthDate, description: body.description, skills: body.skills, phoneNumper: body.phoneNumper};\n\n    VacancyModel.update({_id: vacancyId, employer: user._id}, body)\n        .then((result) => res.json({\n            status: 0,\n            message: \"\",\n            devMessage: result,\n        }))\n        .catch((err) => res.json({\n            status: -1,\n            message: \"\",\n            devMessage: err.toString,\n        }));\n})\n\nrouter.delete('/:vacancyId', requireAuth, ({ params: { vacancyId }, body, company }, res) => {\n\tif(vacancyId == vacancy._id){\n\t\tVacancyModel.findByIdAndRemove(vacancyId)\n\t\t\t.then(() => res.json({\n\t\t\t\tstatus: 0,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: \"Vacancy successfuly deleted\",\n\t\t\t}))\n\t\t\t.catch((err) => res.json({\n\t\t\t\tstatus: -1,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: err.toString,\n\t\t\t}));\n\t} else {\n\t\tres.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"You don't have permissions to do it\",\n\t\t})\n\t}\n})\n\nexport default router;\n\n"]}