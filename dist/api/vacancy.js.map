{"version":3,"sources":["../../api/vacancy.js"],"names":["router","express","Router","get","res","query","page","parseInt","perPage","ownerId","VacancyModel","paginate","offset","limit","then","json","status","message","devMessage","data","result","docs","metaData","totalPages","total","currentPage","catch","error","vacancyId","params","findById","post","requireAuth","body","user","type","vacancy","vacancyModel","name","photo","description","_id","requiredSkills","location","placeId","formattedAddress","types","save","code","put","findOneAndUpdate","new","doc","delete","findOneAndRemove","err"],"mappings":"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","file":"vacancy.js","sourcesContent":["import VacancyModel from '../models/vacancy';\nimport requireAuth from '../middleware/require-auth';\nimport express from 'express';\nimport vacancyModel from '../models/vacancy';\nconst router = express.Router();\n\nrouter.get('/', ({query}, res) => {\n\t//VacancyModel.find({}, {auth_tokens: 0, refresh_tokens: 0}).\n\tconst page = parseInt(query.page || 0);\n    const perPage = parseInt(query.perPage || 20);\n    const ownerId = query.ownerId; \n\tVacancyModel.paginate(ownerId ? {ownerId} : {}, {offset: page * perPage , limit: perPage})\n\t\t.then(result => res.json({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result.docs,\n\t\t\tmetaData: {\n\t\t\t\ttotalPages: result.total % perPage == 0 ? result.total / perPage : parseInt(result.total / perPage) + 1,\n\t\t\t\tperPage: perPage,\n\t\t\t\tcurrentPage: page\t\t\n\t\t\t}\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: error,\n\t\t}))\n});\n\nrouter.get('/:vacancyId', ({ params: { vacancyId } }, res) => {\n\tVacancyModel.findById(vacancyId)\n\t\t.then(result => res.json({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result,\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"Vacancy not found\",\n\t\t}))\n});\n\nrouter.post('/', requireAuth, ({body, user}, res) => {\n\tif(user.type == \"company\"){\n\t\tconst vacancy = new vacancyModel({name: body.name, photo: body.photo, description: body.description, ownerId: user._id, requiredSkills: body.requiredSkills, location: {placeId: body.placeId, formattedAddress: body.formattedAddress || \"City Name\"}, types: body.types});\n\t\tvacancy.save()\t\t\t\n\t\t\t.then( () => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 0,\n\t\t\t\t\tmessage: 'Vacancy successfull created',\n\t\t\t\t\tdata: vacancy,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: error.code || -1,\n\t\t\t\t\tmessage: \"\",\n\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\tdevMessage: error.message,\n\t\t\t\t})\n\t\t\t})\n\t} else {\n\t\tres.json({\n\t\t\tstatus: 7,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"You don't have permissions to do it\",\n\t\t})\n\t}\n});\n\nrouter.put('/:vacancyId', requireAuth, ({ params: { vacancyId }, body, user }, res) => {\n\t// let updates = {name: body.name, avatar: body.avatar, birthDate: body.birthDate, description: body.description, skills: body.skills, phoneNumper: body.phoneNumper};\n\t// let update = {name: body.name};\n\tVacancyModel.findOneAndUpdate({_id: vacancyId, ownerId: user._id}, {name: body.name, photo: body.photo, description: body.description, ownerId: user._id, requiredSkills: body.requiredSkills, location: {placeId: body.placeId, formattedAddress: body.formattedAddress || \"City Name\"}, types: body.types}, {new: true}).then( doc => {\n\t\tif(doc == null){\n\t\t\tres.json({\n\t\t\t\tstatus: -1,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: \"Invalid vacancy id or you do not have permissions\",\n\t\t\t\tdata: doc\n\t\t\t})\n\t\t} else {\n\t\t\tres.json({\n\t\t\t\tstatus: 0,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: \"Vacancy successfull update\",\n\t\t\t\tdata: doc\n\t\t\t})\n\t\t}\n\t}).catch( error => {\n\t\tres.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: error,\n\t\t})\n\t});\n})\n\nrouter.delete('/:vacancyId', requireAuth, ({ params: { vacancyId }, user }, res) => {\n//\tif(vacancyId == vacancy._id){\n\t\t//VacancyModel.findByIdAndRemove(vacancyId)\n\t\tVacancyModel.findOneAndRemove({_id: vacancyId, ownerId: user._id})\n\t\t\t.then((result) => {\n\t\t\t\tif(result == null){\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tstatus: 0,\n\t\t\t\t\t\tmessage: \"\",\n\t\t\t\t\t\tdevMessage: \"Invalid vacancy id or you do not have permissions\",\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tstatus: 0,\n\t\t\t\t\t\tmessage: \"\",\n\t\t\t\t\t\tdevMessage: \"Vacancy successfuly deleted\",\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => res.json({\n\t\t\t\tstatus: -1,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: err,\n\t\t\t}));\n\t// } else {\n\t// \tres.json({\n\t// \t\tstatus: -1,\n\t// \t\tmessage: \"\",\n\t// \t\tdevMessage: \"You don't have permissions to do it\",\n\t// \t})\n\t// }\n})\n\nexport default router;\n\n"]}