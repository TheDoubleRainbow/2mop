{"version":3,"sources":["../../api/excursion.js"],"names":["router","express","Router","get","res","query","page","parseInt","perPage","organizer","ExcursionModel","paginate","offset","limit","then","json","status","message","devMessage","data","result","docs","metaData","totalPages","total","currentPage","catch","error","excursionId","params","findById","post","requireAuth","body","user","type","excursion","excursionModel","name","photo","description","organizerId","_id","requiredSkills","save","code","put","findOneAndUpdate","new","doc","delete","findOneAndRemove","err"],"mappings":"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","file":"excursion.js","sourcesContent":["import ExcursionModel from '../models/excursion';\nimport requireAuth from '../middleware/require-auth';\nimport express from 'express';\nimport excursionModel from '../models/excursion';\nconst router = express.Router();\n\nrouter.get('/', ({query}, res) => {\n\t//ExcursionModel.find({}, {auth_tokens: 0, refresh_tokens: 0}).\n\tconst page = parseInt(query.page || 0);\n    const perPage = parseInt(query.perPage || 20);\n    const organizer = query.organizer; \n\tExcursionModel.paginate(organizer ? {organizer} : {}, {offset: page * perPage , limit: perPage})\n\t\t.then(result => res.json({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result.docs,\n\t\t\tmetaData: {\n\t\t\t\ttotalPages: result.total % perPage == 0 ? result.total / perPage : parseInt(result.total / perPage) + 1,\n\t\t\t\tperPage: perPage,\n\t\t\t\tcurrentPage: page\t\t\n\t\t\t}\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: error,\n\t\t}))\n});\n\nrouter.get('/:excursionId', ({ params: { excursionId } }, res) => {\n\tExcursionModel.findById(excursionId)\n\t\t.then(result => res.json({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"\",\n\t\t\tdata: result,\n\t\t}))\n\t\t.catch(error => res.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"Excursion not found\",\n\t\t}))\n});\n\nrouter.post('/', requireAuth, ({body, user}, res) => {\n\tif(user.type == \"company\"){\n\t\tconst excursion = new excursionModel({name: body.name, photo: body.photo, description: body.description, organizerId: user._id, requiredSkills: body.requiredSkills});\n\t\texcursion.save()\t\t\t\n\t\t\t.then( () => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: 0,\n\t\t\t\t\tmessage: 'Excursion successfull created',\n\t\t\t\t\tdata: excursion,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tres.json({\n\t\t\t\t\tstatus: error.code || -1,\n\t\t\t\t\tmessage: \"\",\n\t\t\t\t\t//devMessage: resMessage(error.message)\n\t\t\t\t\tdevMessage: error,\n\t\t\t\t})\n\t\t\t})\n\t} else {\n\t\tres.json({\n\t\t\tstatus: 7,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"You don't have permissions to do it\",\n\t\t})\n\t}\n});\n\nrouter.put('/:excursionId', requireAuth, ({ params: { excursionId }, body, user }, res) => {\n\t// let updates = {name: body.name, avatar: body.avatar, birthDate: body.birthDate, description: body.description, skills: body.skills, phoneNumper: body.phoneNumper};\n\t// let update = {name: body.name};\n\tExcursionModel.findOneAndUpdate({_id: excursionId, organizerId: user._id}, body, {new: true}).then( doc => {\n\t\tres.json({\n\t\t\tstatus: 0,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: \"Vacation successfull update\",\n\t\t\tdata: doc\n\t\t})\n\t}).catch( error => {\n\t\tres.json({\n\t\t\tstatus: -1,\n\t\t\tmessage: \"\",\n\t\t\tdevMessage: error,\n\t\t})\n\t});\n})\n\nrouter.delete('/:excursionId', requireAuth, ({ params: { excursionId }, user }, res) => {\n//\tif(excursionId == excursion._id){\n\t\t//ExcursionModel.findByIdAndRemove(excursionId)\n\t\tExcursionModel.findOneAndRemove({_id: excursionId, organizerId: user._id})\n\t\t\t.then(() => res.json({\n\t\t\t\tstatus: 0,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: \"Excursion successfuly deleted\",\n\t\t\t}))\n\t\t\t.catch((err) => res.json({\n\t\t\t\tstatus: -1,\n\t\t\t\tmessage: \"\",\n\t\t\t\tdevMessage: err,\n\t\t\t}));\n\t// } else {\n\t// \tres.json({\n\t// \t\tstatus: -1,\n\t// \t\tmessage: \"\",\n\t// \t\tdevMessage: \"You don't have permissions to do it\",\n\t// \t})\n\t// }\n})\n\nexport default router;\n\n"]}