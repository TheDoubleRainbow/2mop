{"version":3,"sources":["../../api/auth.js"],"names":["authApi","create","res","body","email","password","UserModel","findOne","select","then","result","status","send","success","message","comparePassword","err","isMatch","token","jwt","sign","sub","_id","config","jwtSecret","expiresIn","json","catch","toString"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,wCAAS;AACxBC,QADwB,wBACcC,GADd,EACmB;AAAA,yBAAlCC,IAAkC;AAAA,QAA1BC,KAA0B,aAA1BA,KAA0B;AAAA,QAAnBC,QAAmB,aAAnBA,QAAmB;;AAC1CC,mBAAUC,OAAV,CAAkB,EAAEH,YAAF,EAAlB,EAA6BI,MAA7B,CAAoC,WAApC,EACKC,IADL,CACU,kBAAU;AACd,UAAI,iBAAQC,MAAR,CAAJ,EAAqB;AACnB,eAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,KADiB;AAE1BC,mBAAS;AAFiB,SAArB,CAAP;AAID;;AAEDJ,aAAOK,eAAP,CAAuBV,QAAvB,EAAiC,UAACW,GAAD,EAAMC,OAAN,EAAkB;AACjD,YAAIA,WAAW,CAACD,GAAhB,EAAqB;AACnB,cAAIE,QAAQC,uBAAIC,IAAJ,CAAS,EAAEC,KAAKX,OAAOY,GAAd,EAAT,EAA8BC,iBAAOC,SAArC,EAAgD;AAC1DC,uBAAW;AAD+C,WAAhD,CAAZ;;AAIA,iBAAOvB,IAAIwB,IAAJ,CAAS;AACdb,qBAAS,IADK;AAEdC,qBAAS,4BAFK;AAGdI;AAHc,WAAT,CAAP;AAKD;;AAEDhB,YAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,KADU;AAEnBC,mBAAS;AAFU,SAArB;AAID,OAjBD;AAkBD,KA3BL,EA4BKa,KA5BL,CA4BW;AAAA,aAAOzB,IAAIU,IAAJ,CAASI,IAAIY,QAAJ,EAAT,CAAP;AAAA,KA5BX;AA6BA;AA/BuB,CAAT,CAAhB;;kBAkCe5B,O","file":"auth.js","sourcesContent":["import { isEmpty } from 'lodash/fp';\nimport resource from 'resource-router-middleware';\nimport jwt from 'jsonwebtoken';\nimport UserModel from '../models/user';\nimport config from '../config';\n\nconst authApi = resource({\n\tcreate({ body: { email, password } }, res) {\n\t\tUserModel.findOne({ email }).select(\"+password\")\n      .then(result => {\n        if (isEmpty(result)) {\n          return res.status(401).send({\n            success: false,\n            message: 'Authentication failed. User not found.'\n          })\n        }\n\n        result.comparePassword(password, (err, isMatch) => {\n          if (isMatch && !err) {\n            var token = jwt.sign({ sub: result._id }, config.jwtSecret, {\n              expiresIn: \"2 days\"\n            });\n\n            return res.json({\n              success: true,\n              message: 'Authentication successfull',\n              token\n            });\n          }\n\n          res.status(401).send({\n            success: false,\n            message: 'Authentication failed. Passwords did not match.'\n          });\n        });\n      })\n      .catch(err => res.send(err.toString()))\n\t},\n});\n\nexport default authApi;\n"]}