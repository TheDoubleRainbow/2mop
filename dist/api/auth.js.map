{"version":3,"sources":["../../api/auth.js"],"names":["authApi","create","res","body","email","password","promiseArray","push","Promise","resolve","reject","UserModel","findOne","select","then","result","CompanyModel","all","send","status","message","userType","type","console","log","comparePassword","err","isMatch","authToken","jwt","sign","sub","_id","config","jwtSecret","expiresIn","authTokenExpiresIn","refreshToken","refreshTokenExpiresIn","auth_tokens","refresh_tokens","save","json","success","toString","catch","delete"],"mappings":"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","file":"auth.js","sourcesContent":["import { isEmpty } from 'lodash/fp';\nimport resource from 'resource-router-middleware';\nimport jwt from 'jsonwebtoken';\nimport UserModel from '../models/user';\nimport CompanyModel from '../models/company';\nimport config from '../config';\n\nconst authApi = resource({\n\tcreate({ body: { email, password } }, res) {\n    let promiseArray = []\n    promiseArray.push(new Promise((resolve, reject) => {\n      UserModel.findOne({ email }).select(\"+password\").then(result => {\n        resolve(result);\n      })\n    }));\n    promiseArray.push(new Promise((resolve, reject) => {\n      CompanyModel.findOne({ email }).select(\"+password\").then(result => {\n        resolve(result);\n      })\n    }))\n      \n    //promiseArray.push(CompanyModel.findOne({ email }).select(\"+password\"));\n    Promise.all(promiseArray)\n      .then(result => {\n        if (isEmpty(result[0]) && isEmpty(result[1])) {\n          return res.send({\n            status: 3,\n            message: 'Authentication failed. User not found.'\n          })\n        }\n        if (!isEmpty(result[0])) {\n          result = result[0];\n        }\n\n        if (!isEmpty(result[1])) {\n          result = result[1];\n        }\n\n        let userType = result.type;\n\n        console.log('result ', result)\n\n        result.comparePassword(password, (err, isMatch) => {\n          if (isMatch && !err) {\n            var authToken = \"bearer \" + jwt.sign({ sub: result._id, type: 'auth', userType }, config.jwtSecret, {\n              expiresIn: config.authTokenExpiresIn\n            });\n\n            var refreshToken = jwt.sign({ sub: result._id, type: 'refresh', userType }, config.jwtSecret, {\n              expiresIn: config.refreshTokenExpiresIn\n            });\n\n            result.auth_tokens.push(authToken);\n            result.refresh_tokens.push(refreshToken);\n            return result.save((err)=>{\n              if(err){\n                res.json({success: false, message: err.toString});\n              } else {\n                res.json({\n                  success: true,\n                  message: 'Authentication successfull',\n                  authToken,\n                  expiresIn: config.authTokenExpiresIn,\n                  refreshToken\n                });\n              }\n            })\n          }\n\n          res.status(401).send({\n            success: false,\n            message: 'Authentication failed. Passwords did not match.'\n          });\n        });\n      })\n      .catch(err => res.send(err.toString()))\n  },\n  delete() {\n\n  }\n});\n\nexport default authApi;\n"]}