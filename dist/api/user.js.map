{"version":3,"sources":["../../api/user.js"],"names":["addFullNameToBody","body","name","full","userApi","id","index","res","params","UserModel","find","then","send","result","catch","status","error","read","userId","findById","update","findByIdAndUpdate","delete","findByIdAndRemove"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,OAAQ;AACjC,KAAI,iBAAQ,aAAI,MAAJ,EAAYC,IAAZ,CAAR,CAAJ,EAAgC;AAC/B,SAAOA,IAAP;AACA;;AAED,QAAO,eAAM;AACZC,QAAM;AACLC,SAAS,aAAI,YAAJ,EAAkBF,IAAlB,CAAT,SAAoC,aAAI,WAAJ,EAAiBA,IAAjB;AAD/B;AADM,EAAN,EAIJA,IAJI,CAAP;AAKA,CAVD;;AAYA,IAAMG,UAAU,wCAAS;AACxBC,KAAI,QADoB;;AAGxBC,MAHwB,uBAGNC,GAHM,EAGD;AAAA,MAAfC,MAAe,QAAfA,MAAe;;AACtBC,iBAAUC,IAAV,GACEC,IADF,CACO;AAAA,UAAUJ,IAAIK,IAAJ,CAASC,MAAT,CAAV;AAAA,GADP,EAEEC,KAFF,CAEQ;AAAA,UAASP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBI,KAArB,CAAT;AAAA,GAFR;AAGA,EAPuB;AASxBC,KATwB,uBASKV,GATL,EASU;AAAA,MAAjBW,MAAiB,SAA3BV,MAA2B,CAAjBU,MAAiB;;AACjCT,iBAAUU,QAAV,CAAmBD,MAAnB,EACEP,IADF,CACO;AAAA,UAAUJ,IAAIK,IAAJ,CAASC,MAAT,CAAV;AAAA,GADP,EAEEC,KAFF,CAEQ;AAAA,UAAMP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAAW,iBAAX,CAArB,CAAN;AAAA,GAFR;AAGA,EAbuB;AAexBQ,OAfwB,yBAeab,GAfb,EAekB;AAAA,MAAvBW,MAAuB,SAAjCV,MAAiC,CAAvBU,MAAuB;AAAA,MAAbjB,IAAa,SAAbA,IAAa;;AACzCQ,iBAAUY,iBAAV,CAA4BH,MAA5B,EAAoClB,kBAAkBC,IAAlB,CAApC,EACEU,IADF,CACO;AAAA,UAAMF,eAAUU,QAAV,CAAmBD,MAAnB,EAA2BP,IAA3B,CAAgC;AAAA,WAAUJ,IAAIK,IAAJ,CAASC,MAAT,CAAV;AAAA,IAAhC,CAAN;AAAA,GADP,EAEEC,KAFF,CAEQ;AAAA,UAAMP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAAW,iBAAX,CAArB,CAAN;AAAA,GAFR;AAGA,EAnBuB;AAqBxBU,OArBwB,0BAqBOf,GArBP,EAqBY;AAAA,MAAjBW,MAAiB,SAA3BV,MAA2B,CAAjBU,MAAiB;;AACnCT,iBAAUc,iBAAV,CAA4BL,MAA5B,EACEP,IADF,CACO;AAAA,UAAMJ,IAAIK,IAAJ,CAAS,0BAAW,4BAAX,CAAT,CAAN;AAAA,GADP,EAEEE,KAFF,CAEQ;AAAA,UAAMP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,0BAAW,iBAAX,CAArB,CAAN;AAAA,GAFR;AAGA;AAzBuB,CAAT,CAAhB;;kBA4BeR,O","file":"user.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport { merge, get, isEmpty } from 'lodash/fp';\nimport resMessage from '../lib/res-message';\nimport UserModel from '../models/user';\n\nconst addFullNameToBody = body => {\n\tif (isEmpty(get('name', body))) {\n\t\treturn body;\n\t}\n\n\treturn merge({\n\t\tname: {\n\t\t\tfull: `${get('name.first', body)} ${get('name.last', body)}`\n\t\t},\n\t}, body);\n};\n\nconst userApi = resource({\n\tid: 'userId',\n\n\tindex({ params }, res) {\n\t\tUserModel.find()\n\t\t\t.then(result => res.send(result))\n\t\t\t.catch(error => res.status(400).send(error))\n\t},\n\n\tread({ params: { userId } }, res) {\n\t\tUserModel.findById(userId)\n\t\t\t.then(result => res.send(result))\n\t\t\t.catch(() => res.status(404).send(resMessage('User not found.')))\n\t},\n\n\tupdate({ params: { userId }, body }, res) {\n\t\tUserModel.findByIdAndUpdate(userId, addFullNameToBody(body))\n\t\t\t.then(() => UserModel.findById(userId).then(result => res.send(result)))\n\t\t\t.catch(() => res.status(404).send(resMessage('User not found.')))\n\t},\n\n\tdelete({ params: { userId } }, res) {\n\t\tUserModel.findByIdAndRemove(userId)\n\t\t\t.then(() => res.send(resMessage('User successfully deleted!')))\n\t\t\t.catch(() => res.status(404).send(resMessage('User not found.')))\n\t}\n});\n\nexport default userApi;\n"]}