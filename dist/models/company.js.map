{"version":3,"sources":["../../models/company.js"],"names":["companySchema","mongoose","Schema","name","type","String","required","email","unique","lowercase","password","select","created_at","Date","default","avatar","birth_date","description","phone_number","auth_tokens","Array","refresh_tokens","pre","next","company","isModified","isNew","bcrypt","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","companyModel","model"],"mappings":";;;;;;AA8BA;;;;AACA;;;;;;AA/BA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAKA,IAAMA,gBAAgB,IAAIC,mBAASC,MAAb,CAAoB;AACxCC,QAAM,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADkC;AAExCC,SAAO,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCE,QAAQ,IAAxC,EAA8CC,WAAW,IAAzD,EAFiC;AAGxCC,YAAU,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCK,QAAQ,KAAxC,EAH8B;AAIxCC,cAAY,EAAER,MAAMS,IAAR,EAAcC,SAAS,IAAID,IAAJ,EAAvB,EAJ4B;AAKxCE,UAAQ,EAAEX,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EALgC;AAMxCE,cAAY,EAAEZ,MAAMS,IAAR,EAAcC,SAAS,EAAvB,EAN4B;AAOxCG,eAAa,EAAEb,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EAP2B;AAQxCI,gBAAc,EAAEd,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EAR0B;AASxCK,eAAa,EAAEf,MAAMgB,KAAR,EAAeN,SAAS,EAAxB,EAT2B;AAUxCO,kBAAgB,EAAEjB,MAAMgB,KAAR,EAAeN,SAAS,EAAxB,EAVwB;AAWxCV,QAAM,EAAEA,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAXkC,CAApB,CAAtB;;AAcAN,cAAcsB,GAAd,CAAkB,MAAlB,EAA0B,UAASC,IAAT,EAAe;AACvC,MAAIC,UAAU,IAAd;AACA,MAAI,KAAKC,UAAL,CAAgB,UAAhB,KAA+B,KAAKC,KAAxC,EAA+C;AAC7CC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrC,UAAID,GAAJ,EAAS;AACP,eAAON,KAAKM,GAAL,CAAP;AACD;AACDF,uBAAOI,IAAP,CAAYP,QAAQd,QAApB,EAA8BoB,IAA9B,EAAoC,UAASD,GAAT,EAAcE,IAAd,EAAoB;AACtD,YAAIF,GAAJ,EAAS;AACP,iBAAON,KAAKM,GAAL,CAAP;AACD;AACDL,gBAAQd,QAAR,GAAmBqB,IAAnB;AACAR;AACD,OAND;AAOD,KAXD;AAYD,GAbD,MAaO;AACL,WAAOA,MAAP;AACD;AACF,CAlBD;;AAoBAvB,cAAcgC,OAAd,CAAsBC,eAAtB,GAAwC,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACvDR,mBAAOS,OAAP,CAAeF,EAAf,EAAmB,KAAKxB,QAAxB,EAAkC,UAASmB,GAAT,EAAcQ,OAAd,EAAuB;AACvD,QAAIR,GAAJ,EAAS;AACP,aAAOM,GAAGN,GAAH,CAAP;AACD;;AAED,WAAOM,GAAG,IAAH,EAASE,OAAT,CAAP;AACD,GAND;AAOD,CARD;;AAUA,IAAMC,eAAerC,mBAASsC,KAAT,CAAe,SAAf,EAA0BvC,aAA1B,CAArB;;kBAEesC,Y","file":"company.js","sourcesContent":["// import mongoose from 'mongoose';\n// import UserModel, {userSchema} from '../models/user';\n// import bcrypt from 'bcrypt';\n\n\n// function extendSchema (Schema, definition, options) {\n//     return new mongoose.Schema(\n//       Object.assign({}, Schema.obj, definition),\n//       options\n//     );\n// }\n\n// const companySchema = extendSchema(userSchema, {\n//     name: {type: String, required: true}\n// });\n\n// // companySchema.methods.comparePassword = function(pw, cb) {\n// //     bcrypt.compare(pw, this.password, function(err, isMatch) {\n// //       if (err) {\n// //         return cb(err);\n// //       }\n      \n// //       return cb(null, isMatch);\n// //     });\n// //   };\n\n// const companyModel = mongoose.model('Company', companySchema);\n\n// export default companyModel;\n\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst companySchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  created_at: { type: Date, default: new Date() },\n  avatar: { type: String, default: \"\" },\n  birth_date: { type: Date, default: \"\" },\n  description: { type: String, default: \"\" },\n  phone_number: { type: String, default: \"\" },\n  auth_tokens: { type: Array, default: [] },\n  refresh_tokens: { type: Array, default: [] },\n  type: { type: String, required: true },\n});\n\ncompanySchema.pre('save', function(next) {\n  var company = this;\n  if (this.isModified('password') || this.isNew) {\n    bcrypt.genSalt(10, function(err, salt) {\n      if (err) {\n        return next(err);\n      }\n      bcrypt.hash(company.password, salt, function(err, hash) {\n        if (err) {\n          return next(err);\n        }\n        company.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\ncompanySchema.methods.comparePassword = function(pw, cb) {\n  bcrypt.compare(pw, this.password, function(err, isMatch) {\n    if (err) {\n      return cb(err);\n    }\n    \n    return cb(null, isMatch);\n  });\n};\n\nconst companyModel = mongoose.model('Company', companySchema);\n\nexport default companyModel;"]}