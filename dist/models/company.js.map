{"version":3,"sources":["../../models/company.js"],"names":["companySchema","mongoose","Schema","name","type","String","required","email","unique","lowercase","password","select","created_at","Number","default","Math","floor","Date","now","avatar","description","phoneNumber","webSite","officesPlaceId","placeId","formattedAddress","authTokens","refreshTokens","versionKey","plugin","mongoosePaginate","pre","next","company","isModified","isNew","bcrypt","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","companyModel","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,IAAIC,mBAASC,MAAb,CAAoB;AACxCC,QAAM,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADkC;AAExCC,SAAO,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCE,QAAQ,IAAxC,EAA8CC,WAAW,IAAzD,EAFiC;AAGxCC,YAAU,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCK,QAAQ,KAAxC,EAH8B;AAIxCC,cAAY,EAAER,MAAMS,MAAR,EAAgBC,SAASC,KAAKC,KAAL,CAAYC,KAAKC,GAAL,KAAa,IAAzB,CAAzB,EAJ4B;AAKxCC,UAAQ,EAAEf,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EALgC;AAMxCM,eAAa,EAAEhB,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EAN2B;AAOxCO,eAAa,EAAEjB,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EAP2B;AAQxCQ,WAAS,EAAElB,MAAMC,MAAR,EAAgBS,SAAS,EAAzB,EAR+B;AASxC;AACAS,kBAAgB,EAAEnB,MAChB,CAAC;AACCoB,eAAS,EAAEpB,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADV;AAECmB,wBAAkB,EAAErB,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAFnB,KAAD,CADc,EAIVQ,SAAS,EAJC,EAVwB;AAexCY,cAAY,EAAEtB,MAAM,CAACC,MAAD,CAAR,EAAkBS,SAAS,EAA3B,EAA+BH,QAAQ,KAAvC,EAf4B;AAgBxCgB,iBAAe,EAAEvB,MAAM,CAACC,MAAD,CAAR,EAAkBS,SAAS,EAA3B,EAA+BH,QAAQ,KAAvC;AACf;AAjBwC,CAApB,EAkBnB;AACDiB,cAAY;AADX,CAlBmB,CAAtB;;AAsBA5B,cAAc6B,MAAd,CAAqBC,0BAArB;;AAEA9B,cAAc+B,GAAd,CAAkB,MAAlB,EAA0B,UAASC,IAAT,EAAe;AACvC,MAAIC,UAAU,IAAd;AACA,MAAI,KAAKC,UAAL,CAAgB,UAAhB,KAA+B,KAAKC,KAAxC,EAA+C;AAC7CC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrC,UAAID,GAAJ,EAAS;AACP,eAAON,KAAKM,GAAL,CAAP;AACD;AACDF,uBAAOI,IAAP,CAAYP,QAAQvB,QAApB,EAA8B6B,IAA9B,EAAoC,UAASD,GAAT,EAAcE,IAAd,EAAoB;AACtD,YAAIF,GAAJ,EAAS;AACP,iBAAON,KAAKM,GAAL,CAAP;AACD;AACDL,gBAAQvB,QAAR,GAAmB8B,IAAnB;AACAR;AACD,OAND;AAOD,KAXD;AAYD,GAbD,MAaO;AACL,WAAOA,MAAP;AACD;AACF,CAlBD;;AAoBAhC,cAAcyC,OAAd,CAAsBC,eAAtB,GAAwC,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACvDR,mBAAOS,OAAP,CAAeF,EAAf,EAAmB,KAAKjC,QAAxB,EAAkC,UAAS4B,GAAT,EAAcQ,OAAd,EAAuB;AACvD,QAAIR,GAAJ,EAAS;AACP,aAAOM,GAAGN,GAAH,CAAP;AACD;;AAED,WAAOM,GAAG,IAAH,EAASE,OAAT,CAAP;AACD,GAND;AAOD,CARD;;AAUA,IAAMC,eAAe9C,mBAAS+C,KAAT,CAAe,SAAf,EAA0BhD,aAA1B,CAArB;;kBAEe+C,Y","file":"company.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport mongoosePaginate from 'mongoose-paginate'\n\nconst companySchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  created_at: { type: Number, default: Math.floor( Date.now() / 1000) },\n  avatar: { type: String, default: \"\" },\n  description: { type: String, default: \"\" },\n  phoneNumber: { type: String, default: \"\" },\n  webSite: { type: String, default: \"\"},\n  //location: { type: String, required: true },\n  officesPlaceId: { type: \n    [{ \n      placeId: { type: String, required: true},\n      formattedAddress: { type: String, required: true}\n    }], default: []},\n  authTokens: { type: [String], default: [], select: false },\n  refreshTokens: { type: [String], default: [], select: false },\n  //type: { type: String, required: true },\n}, {\n  versionKey: false\n});\n\ncompanySchema.plugin(mongoosePaginate);\n\ncompanySchema.pre('save', function(next) {\n  var company = this;\n  if (this.isModified('password') || this.isNew) {\n    bcrypt.genSalt(10, function(err, salt) {\n      if (err) {\n        return next(err);\n      }\n      bcrypt.hash(company.password, salt, function(err, hash) {\n        if (err) {\n          return next(err);\n        }\n        company.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\ncompanySchema.methods.comparePassword = function(pw, cb) {\n  bcrypt.compare(pw, this.password, function(err, isMatch) {\n    if (err) {\n      return cb(err);\n    }\n    \n    return cb(null, isMatch);\n  });\n};\n\nconst companyModel = mongoose.model('Company', companySchema);\n\nexport default companyModel;"]}