{"version":3,"sources":["../../models/user.js"],"names":["userSchema","mongoose","Schema","name","first","type","String","required","last","full","email","unique","lowercase","password","select","created_at","Date","default","pre","next","user","isModified","isNew","bcrypt","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","userModel","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,IAAIC,mBAASC,MAAb,CAAoB;AACrCC,QAAM;AACJC,WAAO,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADH;AAEJC,UAAM,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFF;AAGJE,UAAM,EAAEJ,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAHF,GAD+B;AAMrCG,SAAO,EAAEL,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCI,QAAQ,IAAxC,EAA8CC,WAAW,IAAzD,EAN8B;AAOrCC,YAAU,EAAER,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCO,QAAQ,KAAxC,EAP2B;AAQrCC,cAAY,EAAEV,MAAMW,IAAR,EAAcC,SAAS,IAAID,IAAJ,EAAvB;AARyB,CAApB,CAAnB;;AAWAhB,WAAWkB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;AACA,MAAI,KAAKC,UAAL,CAAgB,UAAhB,KAA+B,KAAKC,KAAxC,EAA+C;AAC7CC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrC,UAAID,GAAJ,EAAS;AACP,eAAON,KAAKM,GAAL,CAAP;AACD;AACDF,uBAAOI,IAAP,CAAYP,KAAKP,QAAjB,EAA2Ba,IAA3B,EAAiC,UAASD,GAAT,EAAcE,IAAd,EAAoB;AACnD,YAAIF,GAAJ,EAAS;AACP,iBAAON,KAAKM,GAAL,CAAP;AACD;AACDL,aAAKP,QAAL,GAAgBc,IAAhB;AACAR;AACD,OAND;AAOD,KAXD;AAYD,GAbD,MAaO;AACL,WAAOA,MAAP;AACD;AACF,CAlBD;;AAoBAnB,WAAW4B,OAAX,CAAmBC,eAAnB,GAAqC,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACpDR,mBAAOS,OAAP,CAAeF,EAAf,EAAmB,KAAKjB,QAAxB,EAAkC,UAASY,GAAT,EAAcQ,OAAd,EAAuB;AACvD,QAAIR,GAAJ,EAAS;AACP,aAAOM,GAAGN,GAAH,CAAP;AACD;;AAED,WAAOM,GAAG,IAAH,EAASE,OAAT,CAAP;AACD,GAND;AAOD,CARD;;AAUA,IAAMC,YAAYjC,mBAASkC,KAAT,CAAe,MAAf,EAAuBnC,UAAvB,CAAlB;;kBAEekC,S","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    first: { type: String, required: true },\n    last: { type: String, required: true },\n    full: { type: String, required: true }\n  },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  created_at: { type: Date, default: new Date() },\n});\n\nuserSchema.pre('save', function(next) {\n  var user = this;\n  if (this.isModified('password') || this.isNew) {\n    bcrypt.genSalt(10, function(err, salt) {\n      if (err) {\n        return next(err);\n      }\n      bcrypt.hash(user.password, salt, function(err, hash) {\n        if (err) {\n          return next(err);\n        }\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\nuserSchema.methods.comparePassword = function(pw, cb) {\n  bcrypt.compare(pw, this.password, function(err, isMatch) {\n    if (err) {\n      return cb(err);\n    }\n    \n    return cb(null, isMatch);\n  });\n};\n\nconst userModel = mongoose.model('User', userSchema);\n\nexport default userModel;"]}