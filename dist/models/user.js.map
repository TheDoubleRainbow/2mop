{"version":3,"sources":["../../models/user.js"],"names":["userSchema","mongoose","Schema","name","first","type","String","required","last","email","unique","lowercase","password","select","created_at","Date","default","avatar","birth_date","description","skills","phone_number","auth_tokens","refresh_tokens","plugin","mongoosePaginate","pre","next","user","isModified","isNew","bcrypt","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","userModel","model"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,kCAAa,IAAIC,mBAASC,MAAb,CAAoB;AAC5CC,QAAM;AACJC,WAAO,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADH;AAEJC,UAAM,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAFF,GADsC;AAK5CE,SAAO,EAAEJ,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCG,QAAQ,IAAxC,EAA8CC,WAAW,IAAzD,EALqC;AAM5CC,YAAU,EAAEP,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCM,QAAQ,KAAxC,EANkC;AAO5CC,cAAY,EAAET,MAAMU,IAAR,EAAcC,SAAS,IAAID,IAAJ,EAAvB,EAPgC;AAQ5CE,UAAQ,EAAEZ,MAAMC,MAAR,EAAgBU,SAAS,EAAzB,EARoC;AAS5CE,cAAY,EAAEb,MAAMU,IAAR,EAAcC,SAAS,EAAvB,EATgC;AAU5CG,eAAa,EAAEd,MAAMC,MAAR,EAAgBU,SAAS,EAAzB,EAV+B;AAW5CI,UAAQ,EAAEf,MAAM,CAACC,MAAD,CAAR,EAAkBU,SAAS,EAA3B,EAXoC;AAY5CK,gBAAc,EAAEhB,MAAMC,MAAR,EAAgBU,SAAS,EAAzB,EAZ8B;AAa5CM,eAAa,EAAEjB,MAAM,CAACC,MAAD,CAAR,EAAkBU,SAAS,EAA3B,EAA+BH,QAAQ,KAAvC,EAb+B;AAc5CU,kBAAgB,EAAElB,MAAM,CAACC,MAAD,CAAR,EAAkBU,SAAS,EAA3B,EAA+BH,QAAQ,KAAvC;AAClB;AAf8C,CAApB,CAAnB;;AAkBPb,WAAWwB,MAAX,CAAkBC,0BAAlB;;AAEAzB,WAAW0B,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;AACA,MAAI,KAAKC,UAAL,CAAgB,UAAhB,KAA+B,KAAKC,KAAxC,EAA+C;AAC7CC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACrC,UAAID,GAAJ,EAAS;AACP,eAAON,KAAKM,GAAL,CAAP;AACD;AACDF,uBAAOI,IAAP,CAAYP,KAAKhB,QAAjB,EAA2BsB,IAA3B,EAAiC,UAASD,GAAT,EAAcE,IAAd,EAAoB;AACnD,YAAIF,GAAJ,EAAS;AACP,iBAAON,KAAKM,GAAL,CAAP;AACD;AACDL,aAAKhB,QAAL,GAAgBuB,IAAhB;AACAR;AACD,OAND;AAOD,KAXD;AAYD,GAbD,MAaO;AACL,WAAOA,MAAP;AACD;AACF,CAlBD;;AAoBA3B,WAAWoC,OAAX,CAAmBC,eAAnB,GAAqC,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACpDR,mBAAOS,OAAP,CAAeF,EAAf,EAAmB,KAAK1B,QAAxB,EAAkC,UAASqB,GAAT,EAAcQ,OAAd,EAAuB;AACvD,QAAIR,GAAJ,EAAS;AACP,aAAOM,GAAGN,GAAH,CAAP;AACD;;AAED,WAAOM,GAAG,IAAH,EAASE,OAAT,CAAP;AACD,GAND;AAOD,CARD;;AAUA,IAAMC,YAAYzC,mBAAS0C,KAAT,CAAe,MAAf,EAAuB3C,UAAvB,CAAlB;;kBAEe0C,S","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport mongoosePaginate from 'mongoose-paginate'\n\nexport const userSchema = new mongoose.Schema({\n  name: {\n    first: { type: String, required: true },\n    last: { type: String, required: true }\n  },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  created_at: { type: Date, default: new Date() },\n  avatar: { type: String, default: \"\" },\n  birth_date: { type: Date, default: \"\" },\n  description: { type: String, default: \"\" },\n  skills: { type: [String], default: [] },\n  phone_number: { type: String, default: \"\" },\n  auth_tokens: { type: [String], default: [], select: false},\n  refresh_tokens: { type: [String], default: [], select: false},\n//  type: { type: String, required: true },\n});\n\nuserSchema.plugin(mongoosePaginate);\n\nuserSchema.pre('save', function(next) {\n  var user = this;\n  if (this.isModified('password') || this.isNew) {\n    bcrypt.genSalt(10, function(err, salt) {\n      if (err) {\n        return next(err);\n      }\n      bcrypt.hash(user.password, salt, function(err, hash) {\n        if (err) {\n          return next(err);\n        }\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\nuserSchema.methods.comparePassword = function(pw, cb) {\n  bcrypt.compare(pw, this.password, function(err, isMatch) {\n    if (err) {\n      return cb(err);\n    }\n    \n    return cb(null, isMatch);\n  });\n};\n\nconst userModel = mongoose.model('User', userSchema);\n\nexport default userModel;"]}