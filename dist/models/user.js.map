{"version":3,"sources":["../../models/user.js"],"names":["userSchema","mongoose","Schema","name","first","type","String","required","last","email","unique","lowercase","password","select","created_at","Number","default","Math","floor","Date","now","avatar","birthDate","description","desiredWork","skills","portfolio","url","phoneNumber","location","cityId","formattedAddress","emailVerified","Boolean","authTokens","refreshTokens","versionKey","plugin","mongoosePaginate","pre","next","user","isModified","isNew","bcrypt","genSalt","err","salt","hash","methods","comparePassword","pw","cb","compare","isMatch","userModel","model"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\nimport mongoosePaginate from 'mongoose-paginate'\n\nexport const userSchema = new mongoose.Schema({\n  name: {\n    first: { type: String, required: true },\n    last: { type: String, required: true }\n  },\n  email: { type: String, required: true, unique: true, lowercase: true },\n  password: { type: String, required: true, select: false },\n  created_at: { type: Number, default: Math.floor( Date.now() / 1000) },\n  avatar: { type: String, default: \"\" },\n  birthDate: { type: Number, default: null },\n  description: { type: String, default: \"\" },\n  desiredWork: { type: String, default: \"\"},\n  skills: { type: [String], default: [] },\n  portfolio: {type: [{name: {type: String}, url: {type: String}}], default: []},\n  phoneNumber: { type: String, default: \"\" },\n  location: {\n    cityId: { type: String, default: []},\n    formattedAddress: { type: String, default: []}\n  },\n  emailVerified: { type: Boolean, default: false},\n  authTokens: { type: [String], default: [], select: false},\n  refreshTokens: { type: [String], default: [], select: false},\n//  type: { type: String, required: true },\n}, {\n  versionKey: false \n});\n\nuserSchema.plugin(mongoosePaginate);\n\nuserSchema.pre('save', function(next) {\n  var user = this;\n  if (this.isModified('password') || this.isNew) {\n    bcrypt.genSalt(10, function(err, salt) {\n      if (err) {\n        return next(err);\n      }\n      bcrypt.hash(user.password, salt, function(err, hash) {\n        if (err) {\n          return next(err);\n        }\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    return next();\n  }\n});\n\nuserSchema.methods.comparePassword = function(pw, cb) {\n  bcrypt.compare(pw, this.password, function(err, isMatch) {\n    if (err) {\n      return cb(err);\n    }\n    \n    return cb(null, isMatch);\n  });\n};\n\nconst userModel = mongoose.model('User', userSchema);\n\nexport default userModel;"]}